:setup:
  :file:
    bundler/setup.rb: |
                      module Bundler
                        def self.require(*args)
                        end
                      end
    stubs.rb: |
              capture_stdout = -> (&block) do
                original_stdout = $stdout
                $stdout         = fake = StringIO.new
                begin
                  yield
                ensure
                  $stdout = original_stdout
                end
                fake.string
              end

              capture_stdout.() { require 'racc/parser' }

              require 'rubygems'
              module Kernel
                gem_method = instance_method :gem
                define_method :gem do |name, *args, &block|
                  if name == 'pg'
                    # do nothing
                  else
                    gem_method.bind(self).call name, *args, &block
                  end
                end
              end

              require 'action_view'
              require 'action_view/helpers'
              require 'action_view/helpers/sanitize_helper'

              module ActionView
                module Helpers
                  module SanitizeHelper
                    def sanitize(html, options = {})
                      html
                    end

                    def sanitize_css(style)
                      style
                    end

                    def strip_tags(html)
                      html
                    end

                    def strip_links(html)
                      html
                    end

                    module ClassMethods #:nodoc:
                      attr_writer :full_sanitizer, :link_sanitizer, :white_list_sanitizer

                      def sanitized_allowed_tags
                        []
                      end

                      def sanitized_allowed_attributes
                        []
                      end
                    end

                  end
                end
              end

              require 'active_record'
              require 'active_record/connection_adapters/postgresql_adapter'

              module ActiveRecord
                module ConnectionAdapters
                  class PostgreSQLAdapter < AbstractAdapter

                    def exec_no_cache(sql, name, binds)
                      # log(sql, name, binds) { @connection.async_exec(sql) }
                      log(sql, name, binds) { @connection.exec(sql) }
                    end

                    def connect
                      # translate argument's hash to args
                      @connection          = PGconn.connect(*@connection_parameters.values_at(*[:host, :port, :options, :tty, :dbname, :user, :password]))

                      OID::Money.precision = (postgresql_version >= 80300) ? 19 : 10

                      if @config[:encoding]
                        raise 'do not configure encoding in database.yml, does not work with postgres-pr'
                      end

                      configure_connection
                      # ::PG::Error is undefined
                      # rescue ::PG::Error => error
                      #   if error.message.include?("does not exist")
                      #     raise ActiveRecord::NoDatabaseError.new(error.message, error)
                      #   else
                      #     raise
                      #   end
                    end

                    protected

                    # Returns the version of the connected PostgreSQL server.
                    def postgresql_version
                      # @connection.server_version
                      90503
                    end
                  end

                  module PostgreSQL
                    module DatabaseStatements
                      def query(sql, name = nil) #:nodoc:
                        log(sql, name) do
                          # result_as_array @connection.async_exec(sql)
                          result_as_array @connection.exec(sql)
                        end
                      end

                      def execute(sql, name = nil)
                        log(sql, name) do
                          # @connection.async_exec(sql)
                          @connection.exec(sql)
                        end
                      end
                    end
                  end
                end
              end

              require 'pg'

              class PGresult
                include Enumerable

                class Row < Array
                  def initialize(fields)
                    super()
                    @fields = fields
                  end

                  def [](key)
                    if (i = @fields.index(key))
                      super i
                    else
                      super key
                    end
                  end
                end

                def initialize(res)
                  @res = res
                  @fields = @res.fields.map {|f| f.name}
                  @result = @res.rows.map { |r| Row.new(fields).replace r }
                end

                alias_method :values, :result

                def fmod(index)
                  @res.fields[index].atttypmod
                end
              end
    systemu.rb: |
                jruby_version = JRUBY_VERSION
                Object.send :remove_const, :JRUBY_VERSION
                require_relative '../jruby+truffle/2.2.0/gems/systemu-2.6.5/lib/systemu'
                JRUBY_VERSION = jruby_version
    "irb/completion.rb": "puts 'irb/completion stubbed'"
    rails-html-sanitizer.rb: "puts 'HTML sanitization stubbed'"

:run:
  :require:
    - openssl-stubs
    - stubs
