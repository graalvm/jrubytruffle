#!/usr/bin/env ruby

require 'backtraces'

puts "Test error in Ruby => C ext => Ruby"
class Bar
  def bar(baz)
    baz.call(proc { raise 'error' })
  end
end

begin
  Backtraces.foo(Bar.new)
rescue => e
  puts e.full_message
end


puts
puts "Test error in the callback to the Sulong-instrinsified qsort()"
p Backtraces.qsort(-> a, b { a <=> b })

begin
  Backtraces.qsort(-> a, b {
    raise "error from Ruby called from instrinsified qsort()"
  })
rescue => e
  puts e.full_message
end


puts
puts "Test error in callback from a native function"
p Backtraces.native_callback(-> { 6*7 })

def error_helper
  raise "error from Ruby called from Sulong called from native callback"
end

begin
  p Backtraces.native_callback(-> {
    error_helper
  })
rescue RubyTruffleError => e
  puts e.full_message
end
