#!/usr/bin/env ruby

require 'backtraces'

def puts_backtrace(backtrace)
  puts backtrace.gsub(Truffle::Boot.ruby_home, '')
                .gsub(/\/cext(_ruby)?\.rb:(\d+)/, '/cext\1.rb:n')
                .gsub(/@\h+/, '@HEXA')
                .gsub(/\{id: \d+ name: [^}]+}/, 'BLOCKINFO')
end

puts "Test error in Ruby => C ext support => Ruby"
RB_FUNCALLV = Truffle::Interop.import('@rb_funcallv')

def callback
  raise 'Ruby callback error'
end

def ruby_call
  RB_FUNCALLV.call(self, 'callback', 0, nil)
end

def top
  ruby_call
end

begin
  top
rescue => e
  puts_backtrace e.full_message
end


puts
puts "Test with an internal error from rb_mutex_lock()"
LOCK = Mutex.new
RB_MUTEX_LOCK = Truffle::Interop.import('@rb_mutex_lock')

LOCK.lock

def double_lock
  RB_MUTEX_LOCK.call(LOCK)
end

begin
  double_lock
rescue => e
  puts_backtrace e.full_message
end


puts
puts "Test error in Ruby => C ext => Ruby => C ext Proc => Ruby"
class Bar
  def bar(baz)
    baz.call(proc { raise 'error' })
  end
end

begin
  Backtraces.foo(Bar.new)
rescue => e
  puts_backtrace e.full_message
end


puts
puts "Test error in the callback to the Sulong-instrinsified qsort()"
p Backtraces.qsort(-> a, b { a <=> b })

begin
  Backtraces.qsort(-> a, b {
    raise "error from Ruby called from instrinsified qsort()"
  })
rescue => e
  puts_backtrace e.full_message
end


puts
puts "Test error in callback from a native function"
p Backtraces.native_callback(-> { 6*7 })

def error_helper
  raise "error from Ruby called from Sulong called from native callback"
end

begin
  p Backtraces.native_callback(-> {
    error_helper
  })
rescue RubyTruffleError => e
  puts_backtrace e.full_message
end
