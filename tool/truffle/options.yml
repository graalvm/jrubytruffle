HOME: [home, string, null, The location of the TruffleRuby installation files]
LAUNCHER: [launcher, string, null, The location of the TruffleRuby launcher program]

LOAD_PATHS: [load_paths, string-array, [], Load paths]
REQUIRED_LIBRARIES: [required_libraries, string-array, [], Required libraries]
INLINE_SCRIPT: [inline_script, byte-string, null, Inline script]
ARGUMENTS: [arguments, string-array, [], Command line arguments for the Ruby program]
DISPLAYED_FILE_NAME: [displayed_file_name, string, null, Displayed file name]

DEBUG: [debug, boolean, false, Debug]
VERBOSITY: [verbosity, verbosity, false, Verbosity]
FROZEN_STRING_LITERALS: [frozen_string_literals, boolean, false, Use frozen string literals]
DISABLE_GEMS: [disable_gems, boolean, false, Disable Gems]

INTERNAL_ENCODING: [internal_encoding, string, null, Internal encoding]
EXTERNAL_ENCODING: [external_encoding, string, null, External encoding]

PLATFORM_SAFE: [platform.safe, boolean, true, Default value for the safety of all operations]
PLATFORM_SAFE_LOAD: [platform.safe.load, boolean, PLATFORM_SAFE, Treat loading, requiring and autoloading as safe]
PLATFORM_SAFE_IO: [platform.safe.io, boolean, PLATFORM_SAFE, Treat any methods that deal with IO as safe]
PLATFORM_SAFE_MEMORY: [platform.safe.memory, boolean, PLATFORM_SAFE, Treat any methods that deal with unmanaged memory as safe]
PLATFORM_SAFE_THREADS: [platform.safe.threads, boolean, PLATFORM_SAFE, Treat any methods that deal with threads as safe]
PLATFORM_SAFE_PROCESSES: [platform.safe.processes, boolean, PLATFORM_SAFE, Treat any methods that deal with processes as safe]
PLATFORM_SAFE_SIGNALS: [platform.safe.siganls, boolean, PLATFORM_SAFE, Treat any methods that deal with signals as safe]
PLATFORM_SAFE_EXIT: [platform.safe.exit, boolean, PLATFORM_SAFE, 'Treat #exit! (hard exiting the VM) as safe']
PLATFORM_SAFE_AT_EXIT: [platform.safe.at_exit, boolean, PLATFORM_SAFE, 'Treat #at_exit as safe']
PLATFORM_SAFE_PUTS: [platform.safe_puts, boolean, true, Treat safe_puts as safe]
PLATFORM_USE_JAVA: [platform.use_java, boolean, false, Use a pure-Java platform, so no native POSIX]

TRACE_CALLS: [trace.calls, boolean, true, Support tracing (set_trace_func, TracePoint) of method calls]
COVERAGE_GLOBAL: [coverage.global, boolean, false, Run coverage for all code and print results on exit]
INLINE_JS: [inline_js, boolean, false, Allow inline JavaScript]

CORE_LOAD_PATH: [core.load_path, string, 'truffle:/jruby-truffle', Location to load the Truffle core library from]
LAZY_TRANSLATION: [lazy_translation, boolean, false, Lazily translate from the parser AST to the Truffle AST]
LAZY_TRANSLATION_LOG: [lazy_translation.log, boolean, false, Log lazy translations from the parser AST to the Truffle AST]

ARRAY_UNINITIALIZED_SIZE: [array.uninitialized_size, integer, 32, How large an Array to allocate when we have no other information to go on]
ARRAY_SMALL: [array.small, integer, 3, Maximum size of an Array to consider small for optimisations]
HASH_PACKED_ARRAY_MAX: [hash.packed_array.max, integer, 3, Maximum size of a Hash to consider using the packed array storage strategy for]

ROPE_LAZY_SUBSTRINGS: [rope.lazy_substrings, boolean, true, Indicates whether a substring operation on a rope should be performed lazily]
ROPE_PRINT_INTERN_STATS: [rope.print_intern_stats, boolean, false, Print interned rope stats at application exit]
ROPE_DEPTH_THRESHOLD: [rope.depth_threshold, integer, 128, Threshold value at which ropes will be rebalanced (indirectly controls flattening as well)]

GLOBAL_VARIABLE_MAX_INVALIDATIONS: [global_variable.max_invalidations, integer, 10, Maximum number of times a global variable can be changed to be considered constant]

DEFAULT_CACHE: [default_cache, integer, 8, Default size for caches]

METHOD_LOOKUP_CACHE: [method_lookup.cache, integer, DEFAULT_CACHE, Method lookup cache size]
DISPATCH_CACHE: [dispatch.cache, integer, DEFAULT_CACHE, Dispatch (various forms of method call) cache size]
YIELD_CACHE: [yield.cache, integer, DEFAULT_CACHE, Yield cache size]
METHOD_TO_PROC_CACHE: [to_proc.cache, integer, DEFAULT_CACHE, Method#to_proc cache size]
IS_A_CACHE: [is_a.cache, integer, DEFAULT_CACHE, 'Kernel#is_a? and #kind_of? cache size']
BIND_CACHE: [bind.cache, integer, DEFAULT_CACHE, Cache size of test for being able to bind a method to a module]
CONSTANT_CACHE: [constant.cache, integer, DEFAULT_CACHE, Constant cache size]
INSTANCE_VARIABLE_CACHE: [instance_variable.cache, integer, DEFAULT_CACHE, Instance variable cache size]
BINDING_LOCAL_VARIABLE_CACHE: [binding_local_variable.cache, integer, DEFAULT_CACHE, Binding#local_variable_get/set cache size]
SYMBOL_TO_PROC_CACHE: [symbol_to_proc.cache, integer, DEFAULT_CACHE, Symbol#to_proc cache size]
ALLOCATE_CLASS_CACHE: [allocate_class.cache, integer, DEFAULT_CACHE, Allocation size class cache size]
PACK_CACHE: [pack.cache, integer, DEFAULT_CACHE, Array#pack cache size]
UNPACK_CACHE: [unpack.cache, integer, DEFAULT_CACHE, String#unpack cache size]
EVAL_CACHE: [eval.cache, integer, DEFAULT_CACHE, eval cache size]
CLASS_CACHE: [class.cache, integer, DEFAULT_CACHE, .class and .metaclass cache size]
ENCODING_COMPATIBLE_QUERY_CACHE: [encoding_compatible_query.cache, integer, DEFAULT_CACHE, 'Encoding.compatible? cache size']
ENCODING_LOADED_CLASSES_CACHE: [encoding_loaded_classes.cache, integer, DEFAULT_CACHE, Cache size of encoding operations based on anticipated number of total active encodings]
THREAD_CACHE: [thread.cache, integer, DEFAULT_CACHE, Cache size of operations that depend on a particular thread]
ROPE_CLASS_CACHE: [rope_class.cache, integer, 6, Cache size for rope operations that depend on a concrete rope implementation to avoid virtual calls]
INTEROP_CONVERT_CACHE: [interop.convert.cache, integer, DEFAULT_CACHE, Cache size for converting values for interop]
INTEROP_EXECUTE_CACHE: [interop.execute.cache, integer, DEFAULT_CACHE, Cache size for interop EXECUTE messages]
INTEROP_READ_CACHE: [interop.read.cache, integer, DEFAULT_CACHE, Cache size for interop READ messages]
INTEROP_WRITE_CACHE: [interop.write.cache, integer, DEFAULT_CACHE, Cache size for interop WRITE messages]
INTEROP_INVOKE_CACHE: [interop.invoke.cache, integer, DEFAULT_CACHE, Cache size for interop INVOKE messages]

CLONE_DEFAULT: [clone.default, boolean, true, Default option for cloning]
INLINE_DEFAULT: [inline.default, boolean, true, Default option for inlining]
CORE_ALWAYS_CLONE: [core.always_clone, boolean, CLONE_DEFAULT, Always clone built-in core methods]
INLINE_NEEDS_CALLER_FRAME: [inline_needs_caller_frame, boolean, INLINE_DEFAULT, Inline methods that need their caller frame]
YIELD_ALWAYS_CLONE: [yield.always_clone, boolean, CLONE_DEFAULT, Always clone yields]
YIELD_ALWAYS_INLINE: [yield.always_inline, boolean, INLINE_DEFAULT, Always inline yields]
METHODMISSING_ALWAYS_CLONE: [method_missing.always_clone, boolean, CLONE_DEFAULT, 'Always clone #method_missing']
METHODMISSING_ALWAYS_INLINE: [method_missing.always_inline, boolean, INLINE_DEFAULT, 'Always inline #method_missing']

PACK_UNROLL_LIMIT: [pack.unroll, integer, 4, If a pack or unpack expression has a loop less than this many iterations, unroll it]
PACK_RECOVER_LOOP_MIN: [pack.recover, integer, 32, If a pack or unpack expression is longer than this, attempt to recover loops]

INSTRUMENTATION_SERVER_PORT: [instrumentation_server_port, integer, 0, Port number to run an HTTP server on that provides instrumentation services]
EXCEPTIONS_STORE_JAVA: [exceptions.store_java, boolean, false, Store the Java exception with the Ruby backtrace]
EXCEPTIONS_PRINT_JAVA: [exceptions.print_java, boolean, false, Print Java exceptions at the point of translating them to Ruby exceptions]
EXCEPTIONS_PRINT_UNCAUGHT_JAVA: [exceptions.print_uncaught_java, boolean, false, Print uncaught Java exceptions at the point of translating them to Ruby exceptions]
EXCEPTIONS_TRANSLATE_ASSERT: [exceptions.translate_assert, boolean, true, Translate failed Java assertions to Ruby exceptions]
BACKTRACES_HIDE_CORE_FILES: [backtraces.hide_core_files, boolean, true, Hide core source files in backtraces, like MRI does]
BACKTRACES_INTERLEAVE_JAVA: [backtraces.interleave_java, boolean, false, Interleave Java stacktraces into the Ruby backtrace]
BACKTRACES_LIMIT: [backtraces.limit, integer, 9999, Limit the size of Ruby backtraces]
BACKTRACES_OMIT_UNUSED: [backtraces.omit_unused, boolean, true, Omit backtraces that should be unused as they have pure rescue expressions]
BASICOPS_INLINE: [basic_ops.inline, boolean, true, Inline basic operations (like Fixnum operators) in the AST without a call]

CALL_GRAPH: [callgraph, boolean, false, Maintain a call graph]
CALL_GRAPH_WRITE: [callgraph.write, string, null, File to write the call graph to on exit]
CHAOS: [chaos, boolean, false, Randomly modify the representation of objects]

GRAAL_WARNING_UNLESS: [graal.warn_unless, boolean, true, Warn unless the JVM has the Graal compiler]

SHARED_OBJECTS_ENABLED: [shared.objects, boolean, true, Enable shared objects]
SHARED_OBJECTS_DEBUG: [shared.objects.debug, boolean, false, Print information about shared objects]
SHARED_OBJECTS_FORCE: [shared.objects.force, boolean, false, Force sharing of objects roots at startup]
SHARED_OBJECTS_SHARE_ALL: [shared.objects.share_all, boolean, false, Consider all objects as shared]

CEXTS_LOG_LOAD: [cexts.log.load, boolean, false, Log loading of cexts]
LOG_DYNAMIC_CONSTANT_LOOKUP: [constant.dynamic_lookup.log, boolean, false, Log source code positions where dynamic constant lookup is performed]

OPTIONS_LOG: [options.log, boolean, false, Log the final value of all options]

LOG_LOAD: [log.load, boolean, false, Log loading files]
LOG_FEATURE_LOCATION: [log.feature_location, boolean, false, Log the process of finding features]
