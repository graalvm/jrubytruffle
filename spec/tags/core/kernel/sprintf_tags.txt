fails:Kernel#sprintf returns a String in the same encoding as the format String if compatible
fails:Kernel#sprintf returns a String in the argument encoding if format encoding is more restrictive
fails:Kernel#sprintf with format string that contains %<> sections raises ArgumentError if missing second named argument
fails:Kernel#sprintf returns a String in the argument's encoding if format encoding is more restrictive
fails:Kernel#sprintf raises Encoding::CompatibilityError if both encodings are ASCII compatible and there ano not ASCII characters
fails:Kernel#sprintf other formats c raises ArgumentError if argument is an empty string
fails:Kernel#sprintf other formats c supports Unicode characters
fails:Kernel#sprintf other formats s does not try to convert with to_str
fails:Kernel#sprintf flags (digit)$ raises exception if argument number is bigger than actual arguments list
fails:Kernel#sprintf flags # applies to format o does nothing for negative argument
fails:Kernel#sprintf flags # applies to formats bBxX does nothing for zero argument
fails:Kernel#sprintf flags # applies to formats aAeEfgG forces a decimal point to be added, even if no digits follow
fails:Kernel#sprintf flags # applies to gG does not remove trailing zeros
fails:Kernel#sprintf flags - left-justifies the result of conversion if width is specified
fails:Kernel#sprintf flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified uses radix-1 when displays negative argument as a two's complement
fails:Kernel#sprintf flags * left-justifies the result if width is negative
fails:Kernel#sprintf flags * left-justifies the result if specified with $ argument is negative
fails:Kernel#sprintf precision string formats determines the maximum number of characters to be copied from the string
fails:Kernel#sprintf reference by name %{name} style supports flags, width and precision
fails:Kernel.sprintf returns a String in the same encoding as the format String if compatible
fails:Kernel.sprintf returns a String in the argument's encoding if format encoding is more restrictive
fails:Kernel.sprintf raises Encoding::CompatibilityError if both encodings are ASCII compatible and there ano not ASCII characters
fails:Kernel.sprintf other formats c raises ArgumentError if argument is an empty string
fails:Kernel.sprintf other formats c supports Unicode characters
fails:Kernel.sprintf other formats s does not try to convert with to_str
fails:Kernel.sprintf flags (digit)$ raises exception if argument number is bigger than actual arguments list
fails:Kernel.sprintf flags # applies to format o does nothing for negative argument
fails:Kernel.sprintf flags # applies to formats bBxX does nothing for zero argument
fails:Kernel.sprintf flags # applies to formats aAeEfgG forces a decimal point to be added, even if no digits follow
fails:Kernel.sprintf flags # applies to gG does not remove trailing zeros
fails:Kernel.sprintf flags - left-justifies the result of conversion if width is specified
fails:Kernel.sprintf flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified uses radix-1 when displays negative argument as a two's complement
fails:Kernel.sprintf flags * left-justifies the result if width is negative
fails:Kernel.sprintf flags * left-justifies the result if specified with $ argument is negative
fails:Kernel.sprintf precision string formats determines the maximum number of characters to be copied from the string
fails:Kernel.sprintf reference by name %{name} style supports flags, width and precision
